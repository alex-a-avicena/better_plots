from dataclasses import dataclass
from matplotlib import colormaps
from matplotlib.colors import LinearSegmentedColormap, rgb2hex
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import warnings

from typing import Optional, Union


DYADIC = 2
TRIADIC = 3
TETRADIC = 4
PENTADIC = 5
HEXADIC = 6
SEPTADIC = 7

MONOCHROMATIC = "monochromatic"
COMPLIMENTARY = "complimentary"
ANALOGOUS = "analogous"
SPACED = "spaced"
SPLIT = "split"

DARK = "dark"
LIGHT = "light"
FULL = "full"
EVEN = "even"
BRIGHT = "bright"

@dataclass
class ColorMaps:
    """
        _summary_
        256-value colormaps for use in general plotting
    """

    parula_rgb =   [
                            (0.2422, 0.1504, 0.6603),
                            (0.2444, 0.1534, 0.6728),
                            (0.2464, 0.1569, 0.6847),
                            (0.2484, 0.1607, 0.6961),
                            (0.2503, 0.1648, 0.7071),
                            (0.2522, 0.1689, 0.7179),
                            (0.2540, 0.1732, 0.7286),
                            (0.2558, 0.1773, 0.7393),
                            (0.2576, 0.1814, 0.7501),
                            (0.2594, 0.1854, 0.7610),
                            (0.2611, 0.1893, 0.7719),
                            (0.2628, 0.1932, 0.7828),
                            (0.2645, 0.1972, 0.7937),
                            (0.2661, 0.2011, 0.8043),
                            (0.2676, 0.2052, 0.8148),
                            (0.2691, 0.2094, 0.8249),
                            (0.2704, 0.2138, 0.8346),
                            (0.2717, 0.2184, 0.8439),
                            (0.2729, 0.2231, 0.8528),
                            (0.2740, 0.2280, 0.8612),
                            (0.2749, 0.2330, 0.8692),
                            (0.2758, 0.2382, 0.8767),
                            (0.2766, 0.2435, 0.8840),
                            (0.2774, 0.2489, 0.8908),
                            (0.2781, 0.2543, 0.8973),
                            (0.2788, 0.2598, 0.9035),
                            (0.2794, 0.2653, 0.9094),
                            (0.2798, 0.2708, 0.9150),
                            (0.2802, 0.2764, 0.9204),
                            (0.2806, 0.2819, 0.9255),
                            (0.2809, 0.2875, 0.9305),
                            (0.2811, 0.2930, 0.9352),
                            (0.2813, 0.2985, 0.9397),
                            (0.2814, 0.3040, 0.9441),
                            (0.2814, 0.3095, 0.9483),
                            (0.2813, 0.3150, 0.9524),
                            (0.2811, 0.3204, 0.9563),
                            (0.2809, 0.3259, 0.9600),
                            (0.2807, 0.3313, 0.9636),
                            (0.2803, 0.3367, 0.9670),
                            (0.2798, 0.3421, 0.9702),
                            (0.2791, 0.3475, 0.9733),
                            (0.2784, 0.3529, 0.9763),
                            (0.2776, 0.3583, 0.9791),
                            (0.2766, 0.3638, 0.9817),
                            (0.2754, 0.3693, 0.9840),
                            (0.2741, 0.3748, 0.9862),
                            (0.2726, 0.3804, 0.9881),
                            (0.2710, 0.3860, 0.9898),
                            (0.2691, 0.3916, 0.9912),
                            (0.2670, 0.3973, 0.9924),
                            (0.2647, 0.4030, 0.9935),
                            (0.2621, 0.4088, 0.9946),
                            (0.2591, 0.4145, 0.9955),
                            (0.2556, 0.4203, 0.9965),
                            (0.2517, 0.4261, 0.9974),
                            (0.2473, 0.4319, 0.9983),
                            (0.2424, 0.4378, 0.9991),
                            (0.2369, 0.4437, 0.9996),
                            (0.2311, 0.4497, 0.9995),
                            (0.2250, 0.4559, 0.9985),
                            (0.2189, 0.4620, 0.9968),
                            (0.2128, 0.4682, 0.9948),
                            (0.2066, 0.4743, 0.9926),
                            (0.2006, 0.4803, 0.9906),
                            (0.1950, 0.4861, 0.9887),
                            (0.1903, 0.4919, 0.9867),
                            (0.1869, 0.4975, 0.9844),
                            (0.1847, 0.5030, 0.9819),
                            (0.1831, 0.5084, 0.9793),
                            (0.1818, 0.5138, 0.9766),
                            (0.1806, 0.5191, 0.9738),
                            (0.1795, 0.5244, 0.9709),
                            (0.1785, 0.5296, 0.9677),
                            (0.1778, 0.5349, 0.9641),
                            (0.1773, 0.5401, 0.9602),
                            (0.1768, 0.5452, 0.9560),
                            (0.1764, 0.5504, 0.9516),
                            (0.1755, 0.5554, 0.9473),
                            (0.1740, 0.5605, 0.9432),
                            (0.1716, 0.5655, 0.9393),
                            (0.1686, 0.5705, 0.9357),
                            (0.1649, 0.5755, 0.9323),
                            (0.1610, 0.5805, 0.9289),
                            (0.1573, 0.5854, 0.9254),
                            (0.1540, 0.5902, 0.9218),
                            (0.1513, 0.5950, 0.9182),
                            (0.1492, 0.5997, 0.9147),
                            (0.1475, 0.6043, 0.9113),
                            (0.1461, 0.6089, 0.9080),
                            (0.1446, 0.6135, 0.9050),
                            (0.1429, 0.6180, 0.9022),
                            (0.1408, 0.6226, 0.8998),
                            (0.1383, 0.6272, 0.8975),
                            (0.1354, 0.6317, 0.8953),
                            (0.1321, 0.6363, 0.8932),
                            (0.1288, 0.6408, 0.8910),
                            (0.1253, 0.6453, 0.8887),
                            (0.1219, 0.6497, 0.8862),
                            (0.1185, 0.6541, 0.8834),
                            (0.1152, 0.6584, 0.8804),
                            (0.1119, 0.6627, 0.8770),
                            (0.1085, 0.6669, 0.8734),
                            (0.1048, 0.6710, 0.8695),
                            (0.1009, 0.6750, 0.8653),
                            (0.0964, 0.6789, 0.8609),
                            (0.0914, 0.6828, 0.8562),
                            (0.0855, 0.6865, 0.8513),
                            (0.0789, 0.6902, 0.8462),
                            (0.0713, 0.6938, 0.8409),
                            (0.0628, 0.6972, 0.8355),
                            (0.0535, 0.7006, 0.8299),
                            (0.0433, 0.7039, 0.8242),
                            (0.0328, 0.7071, 0.8183),
                            (0.0234, 0.7103, 0.8124),
                            (0.0155, 0.7133, 0.8064),
                            (0.0091, 0.7163, 0.8003),
                            (0.0046, 0.7192, 0.7941),
                            (0.0019, 0.7220, 0.7878),
                            (0.0009, 0.7248, 0.7815),
                            (0.0018, 0.7275, 0.7752),
                            (0.0046, 0.7301, 0.7688),
                            (0.0094, 0.7327, 0.7623),
                            (0.0162, 0.7352, 0.7558),
                            (0.0253, 0.7376, 0.7492),
                            (0.0369, 0.7400, 0.7426),
                            (0.0504, 0.7423, 0.7359),
                            (0.0638, 0.7446, 0.7292),
                            (0.0770, 0.7468, 0.7224),
                            (0.0899, 0.7489, 0.7156),
                            (0.1023, 0.7510, 0.7088),
                            (0.1141, 0.7531, 0.7019),
                            (0.1252, 0.7552, 0.6950),
                            (0.1354, 0.7572, 0.6881),
                            (0.1448, 0.7593, 0.6812),
                            (0.1532, 0.7614, 0.6741),
                            (0.1609, 0.7635, 0.6671),
                            (0.1678, 0.7656, 0.6599),
                            (0.1741, 0.7678, 0.6527),
                            (0.1799, 0.7699, 0.6454),
                            (0.1853, 0.7721, 0.6379),
                            (0.1905, 0.7743, 0.6303),
                            (0.1954, 0.7765, 0.6225),
                            (0.2003, 0.7787, 0.6146),
                            (0.2061, 0.7808, 0.6065),
                            (0.2118, 0.7828, 0.5983),
                            (0.2178, 0.7849, 0.5899),
                            (0.2244, 0.7869, 0.5813),
                            (0.2318, 0.7887, 0.5725),
                            (0.2401, 0.7905, 0.5636),
                            (0.2491, 0.7922, 0.5546),
                            (0.2589, 0.7937, 0.5454),
                            (0.2695, 0.7951, 0.5360),
                            (0.2809, 0.7964, 0.5266),
                            (0.2929, 0.7975, 0.5170),
                            (0.3052, 0.7985, 0.5074),
                            (0.3176, 0.7994, 0.4975),
                            (0.3301, 0.8002, 0.4876),
                            (0.3424, 0.8009, 0.4774),
                            (0.3548, 0.8016, 0.4669),
                            (0.3671, 0.8021, 0.4563),
                            (0.3795, 0.8026, 0.4454),
                            (0.3921, 0.8029, 0.4344),
                            (0.4050, 0.8031, 0.4233),
                            (0.4184, 0.8030, 0.4122),
                            (0.4322, 0.8028, 0.4013),
                            (0.4463, 0.8024, 0.3904),
                            (0.4608, 0.8018, 0.3797),
                            (0.4753, 0.8011, 0.3691),
                            (0.4899, 0.8002, 0.3586),
                            (0.5044, 0.7993, 0.3480),
                            (0.5187, 0.7982, 0.3374),
                            (0.5329, 0.7970, 0.3267),
                            (0.5470, 0.7957, 0.3159),
                            (0.5609, 0.7943, 0.3050),
                            (0.5748, 0.7929, 0.2941),
                            (0.5886, 0.7913, 0.2833),
                            (0.6024, 0.7896, 0.2726),
                            (0.6161, 0.7878, 0.2622),
                            (0.6297, 0.7859, 0.2521),
                            (0.6433, 0.7839, 0.2423),
                            (0.6567, 0.7818, 0.2329),
                            (0.6701, 0.7796, 0.2239),
                            (0.6833, 0.7773, 0.2155),
                            (0.6963, 0.7750, 0.2075),
                            (0.7091, 0.7727, 0.1998),
                            (0.7218, 0.7703, 0.1924),
                            (0.7344, 0.7679, 0.1852),
                            (0.7468, 0.7654, 0.1782),
                            (0.7590, 0.7629, 0.1717),
                            (0.7710, 0.7604, 0.1658),
                            (0.7829, 0.7579, 0.1608),
                            (0.7945, 0.7554, 0.1570),
                            (0.8060, 0.7529, 0.1546),
                            (0.8172, 0.7505, 0.1535),
                            (0.8281, 0.7481, 0.1536),
                            (0.8389, 0.7457, 0.1546),
                            (0.8495, 0.7435, 0.1564),
                            (0.8600, 0.7413, 0.1587),
                            (0.8703, 0.7392, 0.1615),
                            (0.8804, 0.7372, 0.1650),
                            (0.8903, 0.7353, 0.1695),
                            (0.9000, 0.7336, 0.1749),
                            (0.9093, 0.7321, 0.1815),
                            (0.9184, 0.7308, 0.1890),
                            (0.9272, 0.7298, 0.1973),
                            (0.9357, 0.7290, 0.2061),
                            (0.9440, 0.7285, 0.2151),
                            (0.9523, 0.7284, 0.2237),
                            (0.9606, 0.7285, 0.2312),
                            (0.9689, 0.7292, 0.2373),
                            (0.9770, 0.7304, 0.2418),
                            (0.9842, 0.7330, 0.2446),
                            (0.9900, 0.7365, 0.2429),
                            (0.9946, 0.7407, 0.2394),
                            (0.9966, 0.7458, 0.2351),
                            (0.9971, 0.7513, 0.2309),
                            (0.9972, 0.7569, 0.2267),
                            (0.9971, 0.7626, 0.2224),
                            (0.9969, 0.7683, 0.2181),
                            (0.9966, 0.7740, 0.2138),
                            (0.9962, 0.7798, 0.2095),
                            (0.9957, 0.7856, 0.2053),
                            (0.9949, 0.7915, 0.2012),
                            (0.9938, 0.7974, 0.1974),
                            (0.9923, 0.8034, 0.1939),
                            (0.9906, 0.8095, 0.1906),
                            (0.9885, 0.8156, 0.1875),
                            (0.9861, 0.8218, 0.1846),
                            (0.9835, 0.8280, 0.1817),
                            (0.9807, 0.8342, 0.1787),
                            (0.9778, 0.8404, 0.1757),
                            (0.9748, 0.8467, 0.1726),
                            (0.9720, 0.8529, 0.1695),
                            (0.9694, 0.8591, 0.1665),
                            (0.9671, 0.8654, 0.1636),
                            (0.9651, 0.8716, 0.1608),
                            (0.9634, 0.8778, 0.1582),
                            (0.9619, 0.8840, 0.1557),
                            (0.9608, 0.8902, 0.1532),
                            (0.9601, 0.8963, 0.1507),
                            (0.9596, 0.9023, 0.1480),
                            (0.9595, 0.9084, 0.1450),
                            (0.9597, 0.9143, 0.1418),
                            (0.9601, 0.9203, 0.1382),
                            (0.9608, 0.9262, 0.1344),
                            (0.9618, 0.9320, 0.1304),
                            (0.9629, 0.9379, 0.1261),
                            (0.9642, 0.9437, 0.1216),
                            (0.9657, 0.9494, 0.1168),
                            (0.9674, 0.9552, 0.1116),
                            (0.9692, 0.9609, 0.1061),
                            (0.9711, 0.9667, 0.1001),
                            (0.9730, 0.9724, 0.0938),
                            (0.9749, 0.9782, 0.0872),
                            (0.9769, 0.9839, 0.0805)
                        ]       
    turbo_rgb =    [
                            (0.1900, 0.0718, 0.2322),
                            (0.1948, 0.0834, 0.2615),
                            (0.1996, 0.0950, 0.2902),
                            (0.2041, 0.1065, 0.3184),
                            (0.2086, 0.1180, 0.3461),
                            (0.2129, 0.1295, 0.3731),
                            (0.2171, 0.1409, 0.3996),
                            (0.2211, 0.1522, 0.4256),
                            (0.2250, 0.1635, 0.4510),
                            (0.2288, 0.1748, 0.4758),
                            (0.2324, 0.1860, 0.5000),
                            (0.2358, 0.1972, 0.5237),
                            (0.2392, 0.2083, 0.5469),
                            (0.2423, 0.2194, 0.5694),
                            (0.2454, 0.2304, 0.5914),
                            (0.2483, 0.2414, 0.6129),
                            (0.2511, 0.2524, 0.6337),
                            (0.2537, 0.2633, 0.6541),
                            (0.2562, 0.2741, 0.6738),
                            (0.2585, 0.2849, 0.6930),
                            (0.2607, 0.2957, 0.7116),
                            (0.2628, 0.3064, 0.7297),
                            (0.2647, 0.3171, 0.7472),
                            (0.2665, 0.3277, 0.7641),
                            (0.2682, 0.3382, 0.7805),
                            (0.2697, 0.3488, 0.7963),
                            (0.2710, 0.3593, 0.8116),
                            (0.2723, 0.3697, 0.8262),
                            (0.2733, 0.3801, 0.8404),
                            (0.2743, 0.3904, 0.8539),
                            (0.2751, 0.4007, 0.8669),
                            (0.2758, 0.4110, 0.8794),
                            (0.2763, 0.4212, 0.8912),
                            (0.2767, 0.4313, 0.9025),
                            (0.2769, 0.4415, 0.9133),
                            (0.2770, 0.4515, 0.9235),
                            (0.2770, 0.4615, 0.9331),
                            (0.2768, 0.4715, 0.9421),
                            (0.2765, 0.4814, 0.9506),
                            (0.2760, 0.4913, 0.9586),
                            (0.2754, 0.5011, 0.9659),
                            (0.2747, 0.5109, 0.9728),
                            (0.2738, 0.5207, 0.9790),
                            (0.2727, 0.5304, 0.9846),
                            (0.2711, 0.5402, 0.9893),
                            (0.2688, 0.5500, 0.9930),
                            (0.2659, 0.5598, 0.9958),
                            (0.2625, 0.5697, 0.9977),
                            (0.2586, 0.5796, 0.9988),
                            (0.2542, 0.5895, 0.9990),
                            (0.2495, 0.5994, 0.9983),
                            (0.2443, 0.6094, 0.9970),
                            (0.2387, 0.6193, 0.9949),
                            (0.2329, 0.6292, 0.9920),
                            (0.2268, 0.6391, 0.9885),
                            (0.2204, 0.6490, 0.9844),
                            (0.2138, 0.6589, 0.9796),
                            (0.2071, 0.6687, 0.9742),
                            (0.2002, 0.6784, 0.9683),
                            (0.1933, 0.6881, 0.9619),
                            (0.1862, 0.6977, 0.9550),
                            (0.1792, 0.7073, 0.9476),
                            (0.1722, 0.7168, 0.9398),
                            (0.1653, 0.7262, 0.9316),
                            (0.1584, 0.7355, 0.9231),
                            (0.1517, 0.7447, 0.9142),
                            (0.1452, 0.7538, 0.9050),
                            (0.1389, 0.7628, 0.8955),
                            (0.1328, 0.7716, 0.8858),
                            (0.1270, 0.7804, 0.8759),
                            (0.1215, 0.7890, 0.8658),
                            (0.1164, 0.7974, 0.8556),
                            (0.1117, 0.8057, 0.8452),
                            (0.1074, 0.8138, 0.8348),
                            (0.1036, 0.8218, 0.8244),
                            (0.1003, 0.8296, 0.8139),
                            (0.0975, 0.8371, 0.8034),
                            (0.0953, 0.8446, 0.7930),
                            (0.0938, 0.8518, 0.7826),
                            (0.0929, 0.8588, 0.7724),
                            (0.0927, 0.8655, 0.7623),
                            (0.0932, 0.8721, 0.7524),
                            (0.0945, 0.8784, 0.7427),
                            (0.0966, 0.8845, 0.7332),
                            (0.0996, 0.8904, 0.7239),
                            (0.1034, 0.8960, 0.7150),
                            (0.1081, 0.9014, 0.7060),
                            (0.1137, 0.9067, 0.6965),
                            (0.1201, 0.9119, 0.6866),
                            (0.1273, 0.9170, 0.6763),
                            (0.1353, 0.9220, 0.6656),
                            (0.1439, 0.9268, 0.6545),
                            (0.1532, 0.9315, 0.6431),
                            (0.1632, 0.9361, 0.6314),
                            (0.1738, 0.9405, 0.6194),
                            (0.1849, 0.9448, 0.6071),
                            (0.1966, 0.9490, 0.5947),
                            (0.2088, 0.9530, 0.5820),
                            (0.2214, 0.9569, 0.5691),
                            (0.2345, 0.9607, 0.5561),
                            (0.2480, 0.9642, 0.5430),
                            (0.2618, 0.9677, 0.5298),
                            (0.2760, 0.9709, 0.5165),
                            (0.2904, 0.9740, 0.5032),
                            (0.3051, 0.9770, 0.4899),
                            (0.3201, 0.9797, 0.4765),
                            (0.3352, 0.9823, 0.4632),
                            (0.3504, 0.9848, 0.4500),
                            (0.3658, 0.9870, 0.4369),
                            (0.3813, 0.9891, 0.4239),
                            (0.3968, 0.9910, 0.4110),
                            (0.4123, 0.9927, 0.3983),
                            (0.4278, 0.9942, 0.3857),
                            (0.4432, 0.9955, 0.3735),
                            (0.4585, 0.9966, 0.3614),
                            (0.4738, 0.9976, 0.3496),
                            (0.4888, 0.9983, 0.3382),
                            (0.5036, 0.9988, 0.3270),
                            (0.5182, 0.9991, 0.3162),
                            (0.5325, 0.9992, 0.3058),
                            (0.5466, 0.9991, 0.2958),
                            (0.5603, 0.9987, 0.2862),
                            (0.5736, 0.9982, 0.2771),
                            (0.5865, 0.9974, 0.2685),
                            (0.5989, 0.9964, 0.2604),
                            (0.6109, 0.9951, 0.2528),
                            (0.6223, 0.9937, 0.2458),
                            (0.6332, 0.9919, 0.2394),
                            (0.6436, 0.9900, 0.2336),
                            (0.6539, 0.9878, 0.2283),
                            (0.6643, 0.9852, 0.2237),
                            (0.6746, 0.9825, 0.2196),
                            (0.6849, 0.9794, 0.2160),
                            (0.6953, 0.9761, 0.2129),
                            (0.7055, 0.9726, 0.2103),
                            (0.7158, 0.9688, 0.2082),
                            (0.7260, 0.9647, 0.2064),
                            (0.7361, 0.9604, 0.2050),
                            (0.7462, 0.9559, 0.2041),
                            (0.7562, 0.9512, 0.2034),
                            (0.7661, 0.9463, 0.2031),
                            (0.7759, 0.9411, 0.2031),
                            (0.7856, 0.9358, 0.2034),
                            (0.7952, 0.9303, 0.2039),
                            (0.8047, 0.9245, 0.2046),
                            (0.8141, 0.9186, 0.2055),
                            (0.8233, 0.9125, 0.2066),
                            (0.8324, 0.9063, 0.2079),
                            (0.8413, 0.8999, 0.2093),
                            (0.8501, 0.8933, 0.2107),
                            (0.8587, 0.8865, 0.2123),
                            (0.8671, 0.8797, 0.2139),
                            (0.8753, 0.8727, 0.2155),
                            (0.8833, 0.8655, 0.2172),
                            (0.8911, 0.8583, 0.2188),
                            (0.8987, 0.8509, 0.2204),
                            (0.9061, 0.8434, 0.2219),
                            (0.9132, 0.8358, 0.2233),
                            (0.9200, 0.8281, 0.2246),
                            (0.9267, 0.8203, 0.2257),
                            (0.9330, 0.8124, 0.2267),
                            (0.9391, 0.8044, 0.2274),
                            (0.9449, 0.7963, 0.2280),
                            (0.9504, 0.7882, 0.2283),
                            (0.9556, 0.7801, 0.2284),
                            (0.9605, 0.7718, 0.2281),
                            (0.9651, 0.7635, 0.2275),
                            (0.9693, 0.7552, 0.2266),
                            (0.9732, 0.7468, 0.2254),
                            (0.9768, 0.7384, 0.2237),
                            (0.9800, 0.7300, 0.2216),
                            (0.9829, 0.7214, 0.2192),
                            (0.9855, 0.7125, 0.2165),
                            (0.9878, 0.7033, 0.2136),
                            (0.9899, 0.6938, 0.2104),
                            (0.9916, 0.6841, 0.2071),
                            (0.9931, 0.6741, 0.2035),
                            (0.9944, 0.6639, 0.1997),
                            (0.9953, 0.6534, 0.1958),
                            (0.9961, 0.6428, 0.1916),
                            (0.9965, 0.6319, 0.1874),
                            (0.9968, 0.6209, 0.1830),
                            (0.9967, 0.6098, 0.1784),
                            (0.9964, 0.5985, 0.1738),
                            (0.9959, 0.5870, 0.1690),
                            (0.9952, 0.5755, 0.1641),
                            (0.9942, 0.5639, 0.1592),
                            (0.9930, 0.5521, 0.1542),
                            (0.9915, 0.5404, 0.1491),
                            (0.9899, 0.5285, 0.1440),
                            (0.9880, 0.5167, 0.1388),
                            (0.9859, 0.5048, 0.1337),
                            (0.9836, 0.4929, 0.1285),
                            (0.9811, 0.4810, 0.1233),
                            (0.9784, 0.4692, 0.1182),
                            (0.9755, 0.4574, 0.1130),
                            (0.9723, 0.4456, 0.1080),
                            (0.9690, 0.4340, 0.1029),
                            (0.9656, 0.4224, 0.0980),
                            (0.9619, 0.4109, 0.0931),
                            (0.9580, 0.3996, 0.0883),
                            (0.9540, 0.3884, 0.0836),
                            (0.9498, 0.3773, 0.0790),
                            (0.9454, 0.3664, 0.0746),
                            (0.9408, 0.3557, 0.0703),
                            (0.9361, 0.3451, 0.0662),
                            (0.9313, 0.3348, 0.0622),
                            (0.9262, 0.3247, 0.0584),
                            (0.9211, 0.3149, 0.0548),
                            (0.9157, 0.3053, 0.0513),
                            (0.9102, 0.2960, 0.0481),
                            (0.9046, 0.2870, 0.0452),
                            (0.8989, 0.2782, 0.0424),
                            (0.8930, 0.2698, 0.0399),
                            (0.8869, 0.2615, 0.0375),
                            (0.8807, 0.2533, 0.0352),
                            (0.8742, 0.2453, 0.0330),
                            (0.8676, 0.2373, 0.0308),
                            (0.8608, 0.2294, 0.0288),
                            (0.8538, 0.2217, 0.0268),
                            (0.8466, 0.2141, 0.0249),
                            (0.8393, 0.2065, 0.0231),
                            (0.8317, 0.1991, 0.0213),
                            (0.8240, 0.1918, 0.0197),
                            (0.8161, 0.1846, 0.0181),
                            (0.8080, 0.1775, 0.0166),
                            (0.7997, 0.1706, 0.0152),
                            (0.7913, 0.1637, 0.0139),
                            (0.7826, 0.1569, 0.0126),
                            (0.7738, 0.1503, 0.0115),
                            (0.7648, 0.1437, 0.0104),
                            (0.7556, 0.1373, 0.0094),
                            (0.7462, 0.1310, 0.0085),
                            (0.7366, 0.1248, 0.0077),
                            (0.7269, 0.1187, 0.0069),
                            (0.7169, 0.1127, 0.0063),
                            (0.7068, 0.1068, 0.0057),
                            (0.6965, 0.1010, 0.0052),
                            (0.6860, 0.0954, 0.0048),
                            (0.6754, 0.0898, 0.0045),
                            (0.6645, 0.0844, 0.0042),
                            (0.6534, 0.0790, 0.0041),
                            (0.6422, 0.0738, 0.0040),
                            (0.6308, 0.0687, 0.0040),
                            (0.6192, 0.0637, 0.0041),
                            (0.6075, 0.0588, 0.0043),
                            (0.5955, 0.0540, 0.0045),
                            (0.5834, 0.0493, 0.0049),
                            (0.5710, 0.0447, 0.0053),
                            (0.5585, 0.0403, 0.0058),
                            (0.5458, 0.0359, 0.0064),
                            (0.5330, 0.0317, 0.0070),
                            (0.5199, 0.0276, 0.0078),
                            (0.5066, 0.0235, 0.0086),
                            (0.4932, 0.0196, 0.0095),
                            (0.4796, 0.0158, 0.0106)
                        ]
    abyss_rgb =    [
                            (0.0372, 0.1373, 0.2165),
                            (0.0377, 0.1389, 0.2190),
                            (0.0381, 0.1405, 0.2216),
                            (0.0386, 0.1421, 0.2241),
                            (0.0390, 0.1437, 0.2267),
                            (0.0394, 0.1453, 0.2292),
                            (0.0399, 0.1469, 0.2318),
                            (0.0403, 0.1486, 0.2343),
                            (0.0408, 0.1502, 0.2369),
                            (0.0412, 0.1518, 0.2394),
                            (0.0416, 0.1534, 0.2420),
                            (0.0421, 0.1550, 0.2445),
                            (0.0425, 0.1566, 0.2471),
                            (0.0429, 0.1582, 0.2496),
                            (0.0434, 0.1599, 0.2522),
                            (0.0438, 0.1615, 0.2547),
                            (0.0443, 0.1631, 0.2573),
                            (0.0447, 0.1647, 0.2598),
                            (0.0451, 0.1663, 0.2623),
                            (0.0456, 0.1679, 0.2649),
                            (0.0460, 0.1695, 0.2674),
                            (0.0465, 0.1712, 0.2700),
                            (0.0469, 0.1728, 0.2725),
                            (0.0473, 0.1744, 0.2751),
                            (0.0478, 0.1760, 0.2776),
                            (0.0482, 0.1776, 0.2802),
                            (0.0486, 0.1792, 0.2827),
                            (0.0491, 0.1808, 0.2853),
                            (0.0495, 0.1825, 0.2878),
                            (0.0500, 0.1841, 0.2904),
                            (0.0504, 0.1857, 0.2929),
                            (0.0508, 0.1873, 0.2955),
                            (0.0513, 0.1889, 0.2980),
                            (0.0517, 0.1905, 0.3006),
                            (0.0521, 0.1922, 0.3031),
                            (0.0526, 0.1938, 0.3056),
                            (0.0530, 0.1954, 0.3082),
                            (0.0535, 0.1970, 0.3107),
                            (0.0539, 0.1986, 0.3133),
                            (0.0543, 0.2002, 0.3158),
                            (0.0548, 0.2018, 0.3184),
                            (0.0552, 0.2035, 0.3209),
                            (0.0557, 0.2051, 0.3235),
                            (0.0561, 0.2067, 0.3260),
                            (0.0565, 0.2083, 0.3286),
                            (0.0570, 0.2099, 0.3311),
                            (0.0574, 0.2115, 0.3337),
                            (0.0578, 0.2131, 0.3362),
                            (0.0583, 0.2148, 0.3388),
                            (0.0587, 0.2164, 0.3413),
                            (0.0592, 0.2180, 0.3439),
                            (0.0596, 0.2196, 0.3464),
                            (0.0600, 0.2212, 0.3489),
                            (0.0605, 0.2228, 0.3515),
                            (0.0609, 0.2244, 0.3540),
                            (0.0614, 0.2261, 0.3566),
                            (0.0618, 0.2277, 0.3591),
                            (0.0622, 0.2293, 0.3617),
                            (0.0627, 0.2309, 0.3642),
                            (0.0631, 0.2325, 0.3668),
                            (0.0635, 0.2341, 0.3693),
                            (0.0640, 0.2357, 0.3719),
                            (0.0644, 0.2374, 0.3744),
                            (0.0649, 0.2390, 0.3770),
                            (0.0653, 0.2406, 0.3795),
                            (0.0657, 0.2422, 0.3821),
                            (0.0662, 0.2438, 0.3846),
                            (0.0666, 0.2454, 0.3872),
                            (0.0670, 0.2471, 0.3897),
                            (0.0675, 0.2487, 0.3922),
                            (0.0679, 0.2503, 0.3948),
                            (0.0684, 0.2519, 0.3973),
                            (0.0688, 0.2535, 0.3999),
                            (0.0692, 0.2551, 0.4024),
                            (0.0697, 0.2567, 0.4050),
                            (0.0701, 0.2584, 0.4075),
                            (0.0706, 0.2600, 0.4101),
                            (0.0710, 0.2616, 0.4126),
                            (0.0714, 0.2632, 0.4152),
                            (0.0719, 0.2648, 0.4177),
                            (0.0723, 0.2664, 0.4203),
                            (0.0727, 0.2680, 0.4228),
                            (0.0732, 0.2697, 0.4254),
                            (0.0736, 0.2713, 0.4279),
                            (0.0741, 0.2729, 0.4305),
                            (0.0745, 0.2745, 0.4330),
                            (0.0749, 0.2761, 0.4355),
                            (0.0754, 0.2777, 0.4381),
                            (0.0758, 0.2793, 0.4406),
                            (0.0763, 0.2810, 0.4432),
                            (0.0767, 0.2826, 0.4457),
                            (0.0771, 0.2842, 0.4483),
                            (0.0776, 0.2858, 0.4508),
                            (0.0780, 0.2874, 0.4534),
                            (0.0784, 0.2890, 0.4559),
                            (0.0789, 0.2906, 0.4585),
                            (0.0793, 0.2923, 0.4610),
                            (0.0798, 0.2939, 0.4636),
                            (0.0802, 0.2955, 0.4661),
                            (0.0806, 0.2971, 0.4687),
                            (0.0811, 0.2987, 0.4712),
                            (0.0815, 0.3003, 0.4738),
                            (0.0820, 0.3020, 0.4763),
                            (0.0824, 0.3036, 0.4788),
                            (0.0828, 0.3052, 0.4814),
                            (0.0833, 0.3068, 0.4839),
                            (0.0837, 0.3084, 0.4865),
                            (0.0841, 0.3100, 0.4890),
                            (0.0846, 0.3116, 0.4916),
                            (0.0850, 0.3133, 0.4941),
                            (0.0855, 0.3149, 0.4967),
                            (0.0859, 0.3165, 0.4992),
                            (0.0863, 0.3181, 0.5018),
                            (0.0868, 0.3197, 0.5043),
                            (0.0872, 0.3213, 0.5069),
                            (0.0876, 0.3229, 0.5094),
                            (0.0881, 0.3246, 0.5120),
                            (0.0885, 0.3262, 0.5145),
                            (0.0890, 0.3278, 0.5171),
                            (0.0894, 0.3294, 0.5196),
                            (0.0898, 0.3310, 0.5221),
                            (0.0903, 0.3326, 0.5247),
                            (0.0907, 0.3342, 0.5272),
                            (0.0912, 0.3359, 0.5298),
                            (0.0916, 0.3375, 0.5323),
                            (0.0920, 0.3391, 0.5349),
                            (0.0925, 0.3407, 0.5374),
                            (0.0929, 0.3423, 0.5400),
                            (0.0933, 0.3439, 0.5425),
                            (0.0938, 0.3455, 0.5451),
                            (0.0942, 0.3472, 0.5476),
                            (0.0947, 0.3488, 0.5502),
                            (0.0951, 0.3504, 0.5527),
                            (0.0955, 0.3520, 0.5553),
                            (0.0960, 0.3536, 0.5578),
                            (0.0964, 0.3552, 0.5604),
                            (0.0969, 0.3569, 0.5629),
                            (0.0973, 0.3585, 0.5654),
                            (0.0977, 0.3601, 0.5680),
                            (0.0982, 0.3617, 0.5705),
                            (0.0986, 0.3633, 0.5731),
                            (0.0990, 0.3649, 0.5756),
                            (0.0995, 0.3665, 0.5782),
                            (0.0999, 0.3682, 0.5807),
                            (0.1004, 0.3698, 0.5833),
                            (0.1008, 0.3714, 0.5858),
                            (0.1012, 0.3730, 0.5884),
                            (0.1017, 0.3746, 0.5909),
                            (0.1021, 0.3762, 0.5935),
                            (0.1025, 0.3778, 0.5960),
                            (0.1030, 0.3795, 0.5986),
                            (0.1034, 0.3811, 0.6011),
                            (0.1039, 0.3827, 0.6037),
                            (0.1043, 0.3843, 0.6062),
                            (0.1047, 0.3859, 0.6087),
                            (0.1052, 0.3875, 0.6113),
                            (0.1056, 0.3891, 0.6138),
                            (0.1061, 0.3908, 0.6164),
                            (0.1065, 0.3924, 0.6189),
                            (0.1069, 0.3940, 0.6215),
                            (0.1074, 0.3956, 0.6240),
                            (0.1078, 0.3972, 0.6266),
                            (0.1082, 0.3988, 0.6291),
                            (0.1087, 0.4004, 0.6317),
                            (0.1091, 0.4021, 0.6342),
                            (0.1096, 0.4037, 0.6368),
                            (0.1100, 0.4053, 0.6393),
                            (0.1104, 0.4069, 0.6419),
                            (0.1109, 0.4085, 0.6444),
                            (0.1113, 0.4101, 0.6470),
                            (0.1117, 0.4118, 0.6495),
                            (0.1122, 0.4134, 0.6520),
                            (0.1126, 0.4150, 0.6546),
                            (0.1131, 0.4166, 0.6571),
                            (0.1135, 0.4182, 0.6597),
                            (0.1139, 0.4198, 0.6622),
                            (0.1144, 0.4214, 0.6648),
                            (0.1148, 0.4231, 0.6673),
                            (0.1153, 0.4247, 0.6699),
                            (0.1157, 0.4263, 0.6724),
                            (0.1161, 0.4279, 0.6750),
                            (0.1166, 0.4295, 0.6775),
                            (0.1170, 0.4311, 0.6801),
                            (0.1174, 0.4327, 0.6826),
                            (0.1179, 0.4344, 0.6852),
                            (0.1183, 0.4360, 0.6877),
                            (0.1188, 0.4376, 0.6903),
                            (0.1192, 0.4392, 0.6928),
                            (0.1196, 0.4408, 0.6953),
                            (0.1201, 0.4424, 0.6979),
                            (0.1205, 0.4440, 0.7004),
                            (0.1210, 0.4457, 0.7030),
                            (0.1214, 0.4473, 0.7055),
                            (0.1218, 0.4489, 0.7081),
                            (0.1223, 0.4505, 0.7106),
                            (0.1227, 0.4521, 0.7132),
                            (0.1231, 0.4537, 0.7157),
                            (0.1236, 0.4553, 0.7183),
                            (0.1240, 0.4570, 0.7208),
                            (0.1245, 0.4586, 0.7234),
                            (0.1249, 0.4602, 0.7259),
                            (0.1253, 0.4618, 0.7285),
                            (0.1258, 0.4634, 0.7310),
                            (0.1262, 0.4650, 0.7336),
                            (0.1266, 0.4667, 0.7361),
                            (0.1271, 0.4683, 0.7386),
                            (0.1275, 0.4699, 0.7412),
                            (0.1280, 0.4715, 0.7437),
                            (0.1284, 0.4731, 0.7463),
                            (0.1288, 0.4747, 0.7488),
                            (0.1293, 0.4763, 0.7514),
                            (0.1297, 0.4780, 0.7539),
                            (0.1302, 0.4796, 0.7565),
                            (0.1306, 0.4812, 0.7590),
                            (0.1310, 0.4828, 0.7616),
                            (0.1315, 0.4844, 0.7641),
                            (0.1319, 0.4860, 0.7667),
                            (0.1323, 0.4876, 0.7692),
                            (0.1328, 0.4893, 0.7718),
                            (0.1332, 0.4909, 0.7743),
                            (0.1337, 0.4925, 0.7769),
                            (0.1341, 0.4941, 0.7794),
                            (0.1345, 0.4957, 0.7819),
                            (0.1350, 0.4973, 0.7845),
                            (0.1354, 0.4989, 0.7870),
                            (0.1359, 0.5006, 0.7896),
                            (0.1363, 0.5022, 0.7921),
                            (0.1367, 0.5038, 0.7947),
                            (0.1372, 0.5054, 0.7972),
                            (0.1376, 0.5070, 0.7998),
                            (0.1380, 0.5086, 0.8023),
                            (0.1385, 0.5102, 0.8049),
                            (0.1389, 0.5119, 0.8074),
                            (0.1394, 0.5135, 0.8100),
                            (0.1398, 0.5151, 0.8125),
                            (0.1402, 0.5167, 0.8151),
                            (0.1407, 0.5183, 0.8176),
                            (0.1411, 0.5199, 0.8202),
                            (0.1415, 0.5216, 0.8227),
                            (0.1420, 0.5232, 0.8252),
                            (0.1424, 0.5248, 0.8278),
                            (0.1429, 0.5264, 0.8303),
                            (0.1433, 0.5280, 0.8329),
                            (0.1437, 0.5296, 0.8354),
                            (0.1442, 0.5312, 0.8380),
                            (0.1446, 0.5329, 0.8405),
                            (0.1451, 0.5345, 0.8431),
                            (0.1455, 0.5361, 0.8456),
                            (0.1459, 0.5377, 0.8482),
                            (0.1464, 0.5393, 0.8507),
                            (0.1468, 0.5409, 0.8533),
                            (0.1472, 0.5425, 0.8558),
                            (0.1477, 0.5442, 0.8584),
                            (0.1481, 0.5458, 0.8609),
                            (0.1486, 0.5474, 0.8635),
                            (0.1490, 0.5490, 0.8660)
                        ]
    fire_rgb =     [
                    (1, 0.0, 0),
                    (1, 0.00392156862745098, 0),
                    (1, 0.00784313725490196, 0),
                    (1, 0.011764705882352941, 0),
                    (1, 0.01568627450980392, 0),
                    (1, 0.0196078431372549, 0),
                    (1, 0.023529411764705882, 0),
                    (1, 0.027450980392156862, 0),
                    (1, 0.03137254901960784, 0),
                    (1, 0.03529411764705882, 0),
                    (1, 0.0392156862745098, 0),
                    (1, 0.043137254901960784, 0),
                    (1, 0.047058823529411764, 0),
                    (1, 0.050980392156862744, 0),
                    (1, 0.054901960784313725, 0),
                    (1, 0.058823529411764705, 0),
                    (1, 0.06274509803921569, 0),
                    (1, 0.06666666666666667, 0),
                    (1, 0.07058823529411765, 0),
                    (1, 0.07450980392156863, 0),
                    (1, 0.0784313725490196, 0),
                    (1, 0.08235294117647059, 0),
                    (1, 0.08627450980392157, 0),
                    (1, 0.09019607843137255, 0),
                    (1, 0.09411764705882353, 0),
                    (1, 0.09803921568627451, 0),
                    (1, 0.10196078431372549, 0),
                    (1, 0.10588235294117647, 0),
                    (1, 0.10980392156862745, 0),
                    (1, 0.11372549019607843, 0),
                    (1, 0.11764705882352941, 0),
                    (1, 0.12156862745098039, 0),
                    (1, 0.12549019607843137, 0),
                    (1, 0.12941176470588237, 0),
                    (1, 0.13333333333333333, 0),
                    (1, 0.13725490196078433, 0),
                    (1, 0.1411764705882353, 0),
                    (1, 0.1450980392156863, 0),
                    (1, 0.14901960784313725, 0),
                    (1, 0.15294117647058825, 0),
                    (1, 0.1568627450980392, 0),
                    (1, 0.1607843137254902, 0),
                    (1, 0.16470588235294117, 0),
                    (1, 0.16862745098039217, 0),
                    (1, 0.17254901960784313, 0),
                    (1, 0.17647058823529413, 0),
                    (1, 0.1803921568627451, 0),
                    (1, 0.1843137254901961, 0),
                    (1, 0.18823529411764706, 0),
                    (1, 0.19215686274509805, 0),
                    (1, 0.19607843137254902, 0),
                    (1, 0.2, 0),
                    (1, 0.20392156862745098, 0),
                    (1, 0.20784313725490197, 0),
                    (1, 0.21176470588235294, 0),
                    (1, 0.21568627450980393, 0),
                    (1, 0.2196078431372549, 0),
                    (1, 0.2235294117647059, 0),
                    (1, 0.22745098039215686, 0),
                    (1, 0.23137254901960785, 0),
                    (1, 0.23529411764705882, 0),
                    (1, 0.23921568627450981, 0),
                    (1, 0.24313725490196078, 0),
                    (1, 0.24705882352941178, 0),
                    (1, 0.25098039215686274, 0),
                    (1, 0.2549019607843137, 0),
                    (1, 0.25882352941176473, 0),
                    (1, 0.2627450980392157, 0),
                    (1, 0.26666666666666666, 0),
                    (1, 0.27058823529411763, 0),
                    (1, 0.27450980392156865, 0),
                    (1, 0.2784313725490196, 0),
                    (1, 0.2823529411764706, 0),
                    (1, 0.28627450980392155, 0),
                    (1, 0.2901960784313726, 0),
                    (1, 0.29411764705882354, 0),
                    (1, 0.2980392156862745, 0),
                    (1, 0.30196078431372547, 0),
                    (1, 0.3058823529411765, 0),
                    (1, 0.30980392156862746, 0),
                    (1, 0.3137254901960784, 0),
                    (1, 0.3176470588235294, 0),
                    (1, 0.3215686274509804, 0),
                    (1, 0.3254901960784314, 0),
                    (1, 0.32941176470588235, 0),
                    (1, 0.3333333333333333, 0),
                    (1, 0.33725490196078434, 0),
                    (1, 0.3411764705882353, 0),
                    (1, 0.34509803921568627, 0),
                    (1, 0.34901960784313724, 0),
                    (1, 0.35294117647058826, 0),
                    (1, 0.3568627450980392, 0),
                    (1, 0.3607843137254902, 0),
                    (1, 0.36470588235294116, 0),
                    (1, 0.3686274509803922, 0),
                    (1, 0.37254901960784315, 0),
                    (1, 0.3764705882352941, 0),
                    (1, 0.3803921568627451, 0),
                    (1, 0.3843137254901961, 0),
                    (1, 0.38823529411764707, 0),
                    (1, 0.39215686274509803, 0),
                    (1, 0.396078431372549, 0),
                    (1, 0.4, 0),
                    (1, 0.403921568627451, 0),
                    (1, 0.40784313725490196, 0),
                    (1, 0.4117647058823529, 0),
                    (1, 0.41568627450980394, 0),
                    (1, 0.4196078431372549, 0),
                    (1, 0.4235294117647059, 0),
                    (1, 0.42745098039215684, 0),
                    (1, 0.43137254901960786, 0),
                    (1, 0.43529411764705883, 0),
                    (1, 0.4392156862745098, 0),
                    (1, 0.44313725490196076, 0),
                    (1, 0.4470588235294118, 0),
                    (1, 0.45098039215686275, 0),
                    (1, 0.4549019607843137, 0),
                    (1, 0.4588235294117647, 0),
                    (1, 0.4627450980392157, 0),
                    (1, 0.4666666666666667, 0),
                    (1, 0.47058823529411764, 0),
                    (1, 0.4745098039215686, 0),
                    (1, 0.47843137254901963, 0),
                    (1, 0.4823529411764706, 0),
                    (1, 0.48627450980392156, 0),
                    (1, 0.49019607843137253, 0),
                    (1, 0.49411764705882355, 0),
                    (1, 0.4980392156862745, 0),
                    (1, 0.5019607843137255, 0),
                    (1, 0.5058823529411764, 0),
                    (1, 0.5098039215686274, 0),
                    (1, 0.5137254901960784, 0),
                    (1, 0.5176470588235295, 0),
                    (1, 0.5215686274509804, 0),
                    (1, 0.5254901960784314, 0),
                    (1, 0.5294117647058824, 0),
                    (1, 0.5333333333333333, 0),
                    (1, 0.5372549019607843, 0),
                    (1, 0.5411764705882353, 0),
                    (1, 0.5450980392156862, 0),
                    (1, 0.5490196078431373, 0),
                    (1, 0.5529411764705883, 0),
                    (1, 0.5568627450980392, 0),
                    (1, 0.5607843137254902, 0),
                    (1, 0.5647058823529412, 0),
                    (1, 0.5686274509803921, 0),
                    (1, 0.5725490196078431, 0),
                    (1, 0.5764705882352941, 0),
                    (1, 0.5803921568627451, 0),
                    (1, 0.5843137254901961, 0),
                    (1, 0.5882352941176471, 0),
                    (1, 0.592156862745098, 0),
                    (1, 0.596078431372549, 0),
                    (1, 0.6, 0),
                    (1, 0.6039215686274509, 0),
                    (1, 0.6078431372549019, 0),
                    (1, 0.611764705882353, 0),
                    (1, 0.615686274509804, 0),
                    (1, 0.6196078431372549, 0),
                    (1, 0.6235294117647059, 0),
                    (1, 0.6274509803921569, 0),
                    (1, 0.6313725490196078, 0),
                    (1, 0.6352941176470588, 0),
                    (1, 0.6392156862745098, 0),
                    (1, 0.6431372549019608, 0),
                    (1, 0.6470588235294118, 0),
                    (1, 0.6509803921568628, 0),
                    (1, 0.6549019607843137, 0),
                    (1, 0.6588235294117647, 0),
                    (1, 0.6627450980392157, 0),
                    (1, 0.6666666666666666, 0),
                    (1, 0.6705882352941176, 0),
                    (1, 0.6745098039215687, 0),
                    (1, 0.6784313725490196, 0),
                    (1, 0.6823529411764706, 0),
                    (1, 0.6862745098039216, 0),
                    (1, 0.6901960784313725, 0),
                    (1, 0.6941176470588235, 0),
                    (1, 0.6980392156862745, 0),
                    (1, 0.7019607843137254, 0),
                    (1, 0.7058823529411765, 0),
                    (1, 0.7098039215686275, 0),
                    (1, 0.7137254901960784, 0),
                    (1, 0.7176470588235294, 0),
                    (1, 0.7215686274509804, 0),
                    (1, 0.7254901960784313, 0),
                    (1, 0.7294117647058823, 0),
                    (1, 0.7333333333333333, 0),
                    (1, 0.7372549019607844, 0),
                    (1, 0.7411764705882353, 0),
                    (1, 0.7450980392156863, 0),
                    (1, 0.7490196078431373, 0),
                    (1, 0.7529411764705882, 0),
                    (1, 0.7568627450980392, 0),
                    (1, 0.7607843137254902, 0),
                    (1, 0.7647058823529411, 0),
                    (1, 0.7686274509803922, 0),
                    (1, 0.7725490196078432, 0),
                    (1, 0.7764705882352941, 0),
                    (1, 0.7803921568627451, 0),
                    (1, 0.7843137254901961, 0),
                    (1, 0.788235294117647, 0),
                    (1, 0.792156862745098, 0),
                    (1, 0.796078431372549, 0),
                    (1, 0.8, 0),
                    (1, 0.803921568627451, 0),
                    (1, 0.807843137254902, 0),
                    (1, 0.8117647058823529, 0),
                    (1, 0.8156862745098039, 0),
                    (1, 0.8196078431372549, 0),
                    (1, 0.8235294117647058, 0),
                    (1, 0.8274509803921568, 0),
                    (1, 0.8313725490196079, 0),
                    (1, 0.8352941176470589, 0),
                    (1, 0.8392156862745098, 0),
                    (1, 0.8431372549019608, 0),
                    (1, 0.8470588235294118, 0),
                    (1, 0.8509803921568627, 0),
                    (1, 0.8549019607843137, 0),
                    (1, 0.8588235294117647, 0),
                    (1, 0.8627450980392157, 0),
                    (1, 0.8666666666666667, 0),
                    (1, 0.8705882352941177, 0),
                    (1, 0.8745098039215686, 0),
                    (1, 0.8784313725490196, 0),
                    (1, 0.8823529411764706, 0),
                    (1, 0.8862745098039215, 0),
                    (1, 0.8901960784313725, 0),
                    (1, 0.8941176470588236, 0),
                    (1, 0.8980392156862745, 0),
                    (1, 0.9019607843137255, 0),
                    (1, 0.9058823529411765, 0),
                    (1, 0.9098039215686274, 0),
                    (1, 0.9137254901960784, 0),
                    (1, 0.9176470588235294, 0),
                    (1, 0.9215686274509803, 0),
                    (1, 0.9254901960784314, 0),
                    (1, 0.9294117647058824, 0),
                    (1, 0.9333333333333333, 0),
                    (1, 0.9372549019607843, 0),
                    (1, 0.9411764705882353, 0),
                    (1, 0.9450980392156862, 0),
                    (1, 0.9490196078431372, 0),
                    (1, 0.9529411764705882, 0),
                    (1, 0.9568627450980393, 0),
                    (1, 0.9607843137254902, 0),
                    (1, 0.9647058823529412, 0),
                    (1, 0.9686274509803922, 0),
                    (1, 0.9725490196078431, 0),
                    (1, 0.9764705882352941, 0),
                    (1, 0.9803921568627451, 0),
                    (1, 0.984313725490196, 0),
                    (1, 0.9882352941176471, 0),
                    (1, 0.9921568627450981, 0),
                    (1, 0.996078431372549, 0),
                    (1, 1.0, 0)]
    grayblue_rgb = ["#93b6bd", "#0dd9d5", "#06aacf", "#0a7ec7", "#0747ad", "#070ca3"]
    yellow_green_rgb = ["#FDFD96", "#FEE76A", "#FFD036", "#FFBC02", "#FFAA02", "#FF9801", "#A99441", "#568550", "#05734A", "#055F3D", "#024B30"]
    sunflower_rgb = ["#EFCC00", "#F5AB29", "#E09D26", "#C98540", "#A75D58", "#A82F63", "#812359", "#632247", "#52203D", "#521B18", "#341B18", "#000000"]
    brown_teal_rgb = ["#543005", "#8D5109", "#C0822D", "#E1C37D", "#F8E9C4", "#C8EBE6", "#80CEC2", "#359890", "#01665E", "#003C30"]
    orange_purple_rgb = ["#7F3B07", "#B45806", "#E18313", "#FEB963", "#FFE1B7", "#D9DBED", "#B3ACD3", "#8073AD", "#542789", "#2D004B"]
    red_blue_rgb = ["#67001F", "#B3172B", "#D7604D", "#F5A683", "#FEDCC8", "#D2E6F1", "#93C6E0", "#4394C4", "#2166AD", "#053061"]
    
    parula = LinearSegmentedColormap.from_list("parula", parula_rgb, N=256) 
    turbo  = LinearSegmentedColormap.from_list("turbo", turbo_rgb, N=256) 
    abyss  = LinearSegmentedColormap.from_list("abyss", abyss_rgb, N=256) 
    fire = LinearSegmentedColormap.from_list("fire", fire_rgb, N=256) 
    grayblue = LinearSegmentedColormap.from_list("grayblue", grayblue_rgb, N=256)
    yellow_green = LinearSegmentedColormap.from_list("yellow-green", yellow_green_rgb, N=256)
    sunflower = LinearSegmentedColormap.from_list("sunflower", sunflower_rgb, N=256)
    brown_teal = LinearSegmentedColormap.from_list("div-brown-teal", brown_teal_rgb, N=256)
    orange_purple = LinearSegmentedColormap.from_list("div-orange-purple", orange_purple_rgb, N=256)
    red_blue = LinearSegmentedColormap.from_list("div-red-blue", red_blue_rgb, N=256)
    magma = colormaps["magma"]
    plasma = colormaps["plasma"]
    inferno = colormaps["inferno"]
    viridis = colormaps["viridis"]
    hsv = colormaps["hsv"]
    
    maps = {
                    "parula":parula,
                    "turbo":turbo,
                    "abyss":abyss,
                    "fire":fire,
                    "gray-blue":grayblue,
                    "magma":magma, 
                    "plasma":plasma,
                    "inferno":inferno,
                    "viridis":viridis,
                    "yellow-green":yellow_green,
                    "sunflower":sunflower, 
                    "diverging-brown-teal":brown_teal,
                    "diverging-orange-purple":orange_purple,
                    "diverging-red-blue":red_blue,
                    "hsv":hsv
                }
@dataclass
class ColorCycles:
    """
        _summary_
        Discretized color lists for use in general line plotting
    """
    cycles = {
        "parula":["#F5E31E", "#FEC03A", "#D2BB58", "#9BBF6F", "#54BD8E", "#17B2B2", "#06A0CD", "#1484D5", "#036AE1", "#353EAF"],
        "matlab":["#0072BD", "#D95319", "#EDB120", "#7E2F8E", "#77AC30", "#4DBEEE", "#A2142F"],
        "ibm":["#648fff", "#785ef0", "#dc267f", "#fe6100", "#ffb000"],
        "wong":["#000000", "#e69f00", "#56b4e9", "#009e73", "#f0e442", "#0072b2", "#d55e00", "#cc79a7"],
        "tol":["#332288", "#117733", "#44aa99", "#88ccee", "#ddcc77", "#cc6677", "#aa4499", "#882255"],
        "solstice":["#3892A5", "#FFBA00", "#C62B2B", "#84AA33", "#944200", "#42598C"],
        "concourse":["#2BA2BD", "#DE1C2B", "#EF6515", "#38609C", "#42487B", "#7B3D4A"],
        "aspect":["#F77D00", "#382733", "#15597B", "#4A8642", "#63487B", "#C69A5A"],
        "cool":["#94D752", "#00B652", "#00B6EF", "#0075C6", "#002263", "#73359C"],
        "flow":["#006DC6", "#009EDE", "#00D3DE", "#15CF9C", "#7BCB63", "#A5C34A"],
        "nature":["#E64B35", "#4DBBD5", "#00A087", "#3C5488", "#F39B7F", "#8491B4", "#91D1C2", "#DC0000", "#7E6148", "#B09C85"],
        "forest":["#1F2F10", "#6C8C08", "#C4B671", "#D4D8CD", "#9F7D5D", "#463A2C"],
        "diverging-brown-teal":["#543005", "#8D5109", "#C0822D", "#E1C37D", "#F8E9C4", "#C8EBE6", "#80CEC2", "#359890", "#01665E", "#003C30"],
        "diverging-orange-purple":["#7F3B07", "#B45806", "#E18313", "#FEB963", "#FFE1B7", "#D9DBED", "#B3ACD3", "#8073AD", "#542789", "#2D004B"],
        "diverging-red-blue":["#67001F", "#B3172B", "#D7604D", "#F5A683", "#FEDCC8", "#D2E6F1", "#93C6E0", "#4394C4", "#2166AD", "#053061"],
        "rainbow":["#151445", "#276475", "#3d8d8f", "#21967d", "#15ad59", "#7aa138", "#c7a124", "#bf7934", "#a1342a", "#781466", "#420363"],
        "yellow-green":["#FDFD96", "#FEE76A", "#FFD036", "#FFBC02", "#FFAA02", "#FF9801", "#A99441", "#568550", "#05734A", "#055F3D", "#024B30"],
        "sunflower":["#EFCC00", "#F5AB29", "#E09D26", "#C98540", "#A75D58", "#A82F63", "#812359", "#632247", "#52203D", "#521B18", "#341B18", "#000000"], 
        }
        
class ColorWheel():
    
    def __init__(self):
    
        self.wheel = ["#F2003C", "#F85900", "#F28800", "#F28800", "#EFCC00", "#F0EA00", "#B1D700", "#00CA24", "#00A877", "#00A78A", "#00A59C", "#00A3AC", "#0093AF", "#0082B2", "#006EBF", "#7D00F8", "#9F00C5", "#B900A6", "#D00081", "#D00081", "#E20064"]

class ColorGenerator():
    
    def __init__(self):
        pass
    
    def harmony(self, seed : Union[str, int, tuple[int, int, int], tuple[float, float, float]] = "#039494", n : int = 3, mode : str = COMPLIMENTARY, spacing : Optional[float] = 30, harmony : Optional[int] = TRIADIC, monochrome : Optional[str] = DARK):
        """_summary_

        Args:
            seed (Union[str, int, tuple[int, int, int], tuple[float, float, float]], optional): _description_. Defaults to "#039494". Seed color upon which the returned color palette is based.
            n (int, optional): Defaults to 3. Number of colors contained in the returned palette. NOTE: colors may be cyclical, i.e. choosing n = 6 and TRIADIC harmony results in a palette containing three distinct colors repeated twice.
            mode (str, optional): Defaults to COMPLIMENTARY. Defines palette mode. Options are 'MONOCHROMATIC', 'COMPLIMENTARY', 'ANALOGOUS', 'SPLIT', and 'SPACED'.
            spacing (Optional[float], optional): Defaults to 30. Angular spacing value (degrees) for 'SPACED' mode.
            harmony (Optional[int], optional): Defaults to TRIADIC. Options are 'DYADIC', 'TRIADIC', 'TETRADIC', 'PENTADIC', 'HEXADIC', and 'SEPTADIC'
            monochrome (Optional[str], optional): Defaults to DARK. Options are 'DARK', 'LIGHT', 'FULL', 'EVEN', and 'BRIGHT'

        Raises:
            ColorError: _description_
        """
        
        if type(seed) == str:
            
            if seed[0] == "#":

                int_r = int(f"0x{seed[1:3]}", 16)
                int_g = int(f"0x{seed[3:5]}", 16)
                int_b = int(f"0x{seed[5:7]}", 16)
                
            else:
                raise ColorError(f"'{seed}' is not recognized as a valid RGB color")
        
        elif type(seed) == int:
            
            seed_bytes = seed.to_bytes(3, byteorder='big', signed=False)
            int_r = seed_bytes[0]
            int_g = seed_bytes[1]
            int_b = seed_bytes[2]
            
        elif type(seed) == tuple[int, int, int]:
            
            int_r = seed[0]
            int_g = seed[1]
            int_b = seed[2]
            
        elif type(seed) == tuple[float, float, float]:
            
            int_r = round(seed[0] * 255)
            int_g = round(seed[1] * 255)
            int_b = round(seed[2] * 255)     
            
        else:
            return
        
        if type(harmony) == str:
            harmony = harmony.lower()
            harmonies = [DYADIC, TRIADIC, TETRADIC, PENTADIC, HEXADIC, SEPTADIC]
            if harmony not in harmonies:
                warnings.warn(f"'{harmony}' is not a recognized harmony setting. Defaulting to {TRIADIC}.")
                harmony = TRIADIC
        
        h, s, l = self.rgb_to_hsl(int_r, int_g, int_b)
        
        if mode == COMPLIMENTARY or mode == ANALOGOUS or mode == SPACED:
            if mode == COMPLIMENTARY:
                
                if harmony < 0:
                    harmony = DYADIC
                elif harmony > 7:
                    harmony = SEPTADIC
                factor = range(0, harmony, 1)
                angles = [i * 360/harmony for i in factor]
                    
            if mode == ANALOGOUS:
                divider = range(0, n, 1)
                angles = [i * 90/n  for i in divider]
                
            if mode == SPACED:
                divider = range(0, n, 1)
                if spacing == None:
                    spacing = 30
                elif spacing < 1 or spacing > 180:
                    raise SpacingError(f"{spacing} is not a valid spacing angle. Spacing must be betweein 1 and 180.")
                
                angles = [i * spacing  for i in divider]
                
            colors = []
            for angle in angles:
                tetradic_hue = (h + angle) % 360
                tet_r, tet_g, tet_b = self.hsl_to_rgb(tetradic_hue, s, l)
                rgb = f"#{hex(tet_r)[2:].zfill(2)}{hex(tet_g)[2:].zfill(2)}{hex(tet_b)[2:].zfill(2)}"
                colors.append(rgb) 
                print (angle)
        
        if mode == SPLIT:
            complement_h = (h + 180) % 360
            split1_h = (complement_h - 30) % 360
            split2_h = (complement_h + 30) % 360
            
            base_r, base_g, base_b = self.hsl_to_rgb(h, s, l)
            split1_r, split1_g, split1_b = self.hsl_to_rgb(split1_h, s, l)
            split2_r, split2_g, split2_b = self.hsl_to_rgb(split2_h, s, l)
            
            base_rgb = f"#{hex(base_r)[2:].zfill(2)}{hex(base_g)[2:].zfill(2)}{hex(base_b)[2:].zfill(2)}"
            split1_rgb = f"#{hex(split1_r)[2:].zfill(2)}{hex(split1_g)[2:].zfill(2)}{hex(split1_b)[2:].zfill(2)}"
            split2_rgb = f"#{hex(split2_r)[2:].zfill(2)}{hex(split2_g)[2:].zfill(2)}{hex(split2_b)[2:].zfill(2)}"
            
            colors = [base_rgb, split1_rgb, split2_rgb]
            
        if mode == MONOCHROMATIC:
            colors = []
            if monochrome == EVEN:
                max_val = max(int_r, int_g, int_b)
                rel_r = int_r / max_val
                rel_g = int_g / max_val
                rel_b = int_b / max_val
                int_r = int(rel_r*127)
                int_g = int(rel_g*127)
                int_b = int(rel_b*127)
                monochrome = FULL
            if monochrome == DARK:
                for i in range(n):
                    color = f"#{hex(int(int_r*((i+1)/n)))[2:].zfill(2)}{hex(int(int_g*((i+1)/n)))[2:].zfill(2)}{hex(int(int_b*((i+1)/n)))[2:].zfill(2)}"
                    colors.append(color)
            elif monochrome == LIGHT:
                for i in range(n):
                    color = f"#{hex(int(int_r + (255-int_r)*((i)/n)))[2:].zfill(2)}{hex(int(int_g + (255-int_g)*((i)/n)))[2:].zfill(2)}{hex(int(int_b + (255-int_b)*((i)/n)))[2:].zfill(2)}"
                    colors.append(color)
            elif monochrome == FULL:
                m = int(n/2)
                if n % 2 == 0:
                    m -= 1
                for i in range(m):
                    color = f"#{hex(int(int_r*((i+1)/(m+1))))[2:].zfill(2)}{hex(int(int_g*((i+1)/(m+1))))[2:].zfill(2)}{hex(int(int_b*((i+1)/(m+1))))[2:].zfill(2)}"
                    colors.append(color)
                colors.append(f"#{hex(int_r)[2:].zfill(2)}{hex(int_g)[2:].zfill(2)}{hex(int_b)[2:].zfill(2)}")
                if n % 2 == 0:
                    m += 1
                for i in range(m):
                    color = f"#{hex(int(int_r + (255-int_r)*((i+1)/(m+1))))[2:].zfill(2)}{hex(int(int_g + (255-int_g)*((i+1)/(m+1))))[2:].zfill(2)}{hex(int(int_b + (255-int_b)*((i+1)/(m+1))))[2:].zfill(2)}"
                    colors.append(color)
            elif monochrome == BRIGHT:
                max_val = max(int_r, int_g, int_b)
                rel_r = int_r / max_val
                rel_g = int_g / max_val
                rel_b = int_b / max_val
                for i in range(n):
                    color = f"#{hex(int(rel_r*((i+1)/(n))*255))[2:].zfill(2)}{hex(int(rel_g*((i+1)/(n))*255))[2:].zfill(2)}{hex(int(rel_b*((i+1)/(n))*255))[2:].zfill(2)}"
                    colors.append(color)
        
        return (colors)
             
    def rgb_to_hsl(self, r, g, b):
        r, g, b = r/255, g/255, b/255
        mx = max(r, g, b)
        mn = min(r, g, b)
        df = mx-mn
        if mx == mn:
            h = 0
        elif mx == r:
            h = (60 * ((g-b)/df) + 360) % 360
        elif mx == g:
            h = (60 * ((b-r)/df) + 120) % 360
        elif mx == b:
            h = (60 * ((r-g)/df) + 240) % 360
        if mx == 0:
            s = 0
        else:
            s = (df/mx)*100
        l = ((mx+mn)/2)*100
        return h, s, l

    def hsl_to_rgb(self, h, s, l):
        s /= 100
        l /= 100
        c = (1 - abs(2 * l - 1)) * s
        x = c * (1 - abs((h / 60) % 2 - 1))
        m = l - c/2
        r, g, b = (0, 0, 0)
        if 0 <= h < 60:
            r, g, b = c, x, 0
        elif 60 <= h < 120:
            r, g, b = x, c, 0
        elif 120 <= h < 180:
            r, g, b = 0, c, x
        elif 180 <= h < 240:
            r, g, b = 0, x, c
        elif 240 <= h < 300:
            r, g, b = x, 0, c
        else:
            r, g, b = c, 0, x
        r, g, b = (round((r+m)*255), round((g+m)*255), round((b+m)*255))
        return r, g, b

class ColorError(Exception):
    """Undefined color"""

class SpacingError(Exception):
    """Unrecognized color spacing"""
  
def plot_demo():
    cycles = list(ColorCycles.cycles.keys())
    m = len(cycles)
    fig, ax = plt.subplots(m, 1, figsize=(8, 8))
    # Create a rectangle patch
    for i in range(m):
        colors = ColorCycles.cycles[cycles[i]]
        ax[i].set_title(f"'{cycles[i]}'")
        ax[i].axis('off')
        ax[i].set_aspect(0.1)
        for color in colors:
            index = colors.index(color)
            rect = patches.Rectangle((index*(1/len(colors)), 0), (1/len(colors)), 1, facecolor=color, edgecolor='none')
            ax[i].add_patch(rect)
        # plt.autoscale(tight=True)
    plt.tight_layout(rect=[0, 0, 1, 1])
    plt.show()
    
def colormap_demo():
    maps = list(ColorMaps.maps.keys())
    m = len(maps)
    fig, ax = plt.subplots(m, 1, figsize=(8, 8))
    # Create a rectangle patch
    for i in range(m):
        cmap = (ColorMaps.maps[maps[i]])
        ax[i].set_title(f"'{maps[i]}'")
        ax[i].axis('off')
        ax[i].set_aspect(0.1)
        x = np.linspace(0, 1, 256)
        for index in range(256):
            color = cmap(x[index])
            rect = patches.Rectangle((index*(1/256), (1/256)), 0.1, 1, facecolor=color, edgecolor='none')
            ax[i].add_patch(rect)
        # plt.autoscale(tight=True)
    plt.tight_layout(rect=[0, 0, 1, 1])
    plt.show()
    
def plot_compliments():
    c = ColorGenerator()
    fig, ax = plt.subplots(1, 1, figsize=(8, 8))
    # Create a rectangle patch
    ax.axis('off')
    ax.set_aspect(0.1)
    # colors = c.palette(seed = "#039494", n=10, harmony=SEPTADIC)
    # colors = c.palette(seed = "#039494", n=10, mode=MONOCHROMATIC, monochrome=FULL)
    colors = c.harmony(seed = "#051b40", n=10, mode=MONOCHROMATIC, monochrome=FULL)
    for color in colors:
        print(color)
        index = colors.index(color)
        rect = patches.Rectangle((index*(1/len(colors)), 0), (1/len(colors)), 1, facecolor=color, edgecolor='none')
        ax.add_patch(rect)
    # plt.autoscale(tight=True)
    plt.tight_layout(rect=[0, 0, 1, 1])
    plt.show()
    
def plot_harmony():
    c = ColorGenerator()
    cycles = []
    modes = [DYADIC, TRIADIC, TETRADIC, PENTADIC, HEXADIC, SEPTADIC]
    mode_names = ['DYADIC', 'TRIADIC', 'TETRADIC', 'PENTADIC', 'HEXADIC', 'SEPTADIC']
    for pltmode in modes:
        cycles.append(c.harmony(seed = "#039494", harmony=pltmode, mode=COMPLIMENTARY))
    m = len(cycles) + 1
    fig, ax = plt.subplots(m, 1, figsize=(8, 8))
    # Create a rectangle patch
    ax[0].set_title(f"'seed' = #039494, 'mode' = 'complimentary'")
    ax[0].axis('off')
    ax[0].set_aspect(0.1)
    rect = patches.Rectangle((0, 0), (1/10), 1, facecolor="#039494", edgecolor='none')
    ax[0].add_patch(rect)
    for i in range(1, m):
        print(i)
        colors = cycles[i-1]
        ax[i].set_title(f"'harmony' = '{mode_names[i-1]}'")
        ax[i].axis('off')
        ax[i].set_aspect(0.1)
        for color in colors:
            index = colors.index(color)
            rect = patches.Rectangle((index*(1/len(colors)), 0), (1/len(colors)), 1, facecolor=color, edgecolor='none')
            ax[i].add_patch(rect)
        # plt.autoscale(tight=True)
    plt.tight_layout(rect=[0, 0, 1, 1])
    plt.show()
    
def plot_analogous():
    c = ColorGenerator()
    cycles = []
    modes = [2, 3, 4, 5, 6]
    for pltmode in modes:
        cycles.append(c.harmony(seed = "#039494", n=pltmode, mode=ANALOGOUS))
    m = len(cycles) + 1
    fig, ax = plt.subplots(m, 1, figsize=(8, 8))
    # Create a rectangle patch
    ax[0].set_title(f"'seed' = #039494, 'mode' = 'analogous'")
    ax[0].axis('off')
    ax[0].set_aspect(0.1)
    rect = patches.Rectangle((0, 0), (1/10), 1, facecolor="#039494", edgecolor='none')
    ax[0].add_patch(rect)
    for i in range(1, m):
        print(i)
        colors = cycles[i-1]
        ax[i].set_title(f"'n' = '{modes[i-1]}'")
        ax[i].axis('off')
        ax[i].set_aspect(0.1)
        for color in colors:
            index = colors.index(color)
            rect = patches.Rectangle((index*(1/len(colors)), 0), (1/len(colors)), 1, facecolor=color, edgecolor='none')
            ax[i].add_patch(rect)
        # plt.autoscale(tight=True)
    plt.tight_layout(rect=[0, 0, 1, 1])
    plt.show()
    
def plot_spaced():
    c = ColorGenerator()
    cycles = []
    modes = [10, 20, 30, 40, 50]
    for pltmode in modes:
        cycles.append(c.harmony(seed = "#039494", n=7, mode=SPACED, spacing=pltmode))
    m = len(cycles) + 1
    fig, ax = plt.subplots(m, 1, figsize=(8, 8))
    # Create a rectangle patch
    ax[0].set_title(f"'seed' = #039494, 'mode' = 'spaced', 'n' = 7")
    ax[0].axis('off')
    ax[0].set_aspect(0.1)
    rect = patches.Rectangle((0, 0), (1/10), 1, facecolor="#039494", edgecolor='none')
    ax[0].add_patch(rect)
    for i in range(1, m):
        print(i)
        colors = cycles[i-1]
        ax[i].set_title(f"'spacing' = '{modes[i-1]}'")
        ax[i].axis('off')
        ax[i].set_aspect(0.1)
        for color in colors:
            index = colors.index(color)
            rect = patches.Rectangle((index*(1/len(colors)), 0), (1/len(colors)), 1, facecolor=color, edgecolor='none')
            ax[i].add_patch(rect)
        # plt.autoscale(tight=True)
    plt.tight_layout(rect=[0, 0, 1, 1])
    plt.show()
    
def plot_monochrome():
    c = ColorGenerator()
    cycles = []
    modes = [DARK, FULL, EVEN, LIGHT, BRIGHT]
    for pltmode in modes:
        cycles.append(c.harmony(seed = "#039494", n=10, mode=MONOCHROMATIC, monochrome=pltmode))
    m = len(cycles) + 1
    fig, ax = plt.subplots(m, 1, figsize=(8, 8))
    # Create a rectangle patch
    ax[0].set_title(f"'seed' = #039494, 'n' = 10")
    ax[0].axis('off')
    ax[0].set_aspect(0.1)
    rect = patches.Rectangle((0, 0), (1/10), 1, facecolor="#039494", edgecolor='none')
    ax[0].add_patch(rect)
    for i in range(1, m):
        print(i)
        colors = cycles[i-1]
        ax[i].set_title(f"'monochrome' = '{modes[i-1]}'")
        ax[i].axis('off')
        ax[i].set_aspect(0.1)
        for color in colors:
            index = colors.index(color)
            rect = patches.Rectangle((index*(1/len(colors)), 0), (1/len(colors)), 1, facecolor=color, edgecolor='none')
            ax[i].add_patch(rect)
        # plt.autoscale(tight=True)
    plt.tight_layout(rect=[0, 0, 1, 1])
    plt.show()
    
def full_v_even():
    c = ColorGenerator()
    cycles = []
    modes = [FULL, EVEN]
    for pltmode in modes:
        cycles.append(c.harmony(seed = "#051b40", n=10, mode=MONOCHROMATIC, monochrome=pltmode))
    m = len(cycles) + 1
    fig, ax = plt.subplots(m, 1, figsize=(8, 8))
    # Create a rectangle patch
    ax[0].set_title(f"'seed' = #051b40, 'n' = 10")
    ax[0].axis('off')
    ax[0].set_aspect(0.1)
    rect = patches.Rectangle((0, 0), (1/10), 1, facecolor="#051b40", edgecolor='none')
    ax[0].add_patch(rect)
    for i in range(1, m):
        print(i)
        colors = cycles[i-1]
        ax[i].set_title(f"'monochrome' = '{modes[i-1]}'")
        ax[i].axis('off')
        ax[i].set_aspect(0.1)
        for color in colors:
            index = colors.index(color)
            rect = patches.Rectangle((index*(1/len(colors)), 0), (1/len(colors)), 1, facecolor=color, edgecolor='none')
            ax[i].add_patch(rect)
        # plt.autoscale(tight=True)
    plt.tight_layout(rect=[0, 0, 1, 1])
    plt.show()
    
if __name__ == "__main__":
    plot_demo()
    colormap_demo()
    # # plot_compliments()
    plot_monochrome()
    full_v_even()
    plot_harmony()
    plot_analogous()
    plot_spaced()
    c = ColorGenerator()
    c.harmony()
    # h, s, l = c.rgb_to_hsl(0xaa, 0xbb, 0xcc)
    # r, g, b = c.hsl_to_rgb(h, s, l)
    # print(hex(r), hex(g), hex(b))